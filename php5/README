
PHP5 Messaging Gateway API Implementation

An implementation of the Messaging Gateway API has been implemented for users of PHP5.
The implementation uses the PHP5's PECL HTTP library and simpleXML parsing library. In
order to use this implementation, you will need both libraries installed.


Installing the Required Libraries

pecl http library
This PECL extension is not bundled with PHP.  Information for installing this PECL extension 
may be found in the manual chapter titled Installation of PECL extensions 
(http://php.oregonstate.edu/manual/en/install.pecl.php). Additional information such as new 
releases, downloads, source files, maintainer information, and a CHANGELOG, can be located 
here: http://pecl.php.net/package/pecl_http.

simplexml functions (http://us2.php.net/simplexml)
The SimpleXML extension provides a very simple and easily usable toolset to convert XML to
an object that can be processed with normal property selectors and array iterators.
The SimpleXML extension is enabled by default. To disable it, use the --disable-simplexml
configure option.


Quick Note on Class Names

You'll notice all class names in this implementation include the verbose prefix "_4INFO_Gateway_".
Since PHP5 does not have a notion of namespaces, we've used verbose class names 
to uniquely identify classes and prevent overlap with your pre-existing class definitions.  The 
class name prefixes essentially define a unique 4INFO Gateway namespace when used in this manner.  
We've used the same naming technique made popular by the Zend Framework 
(http://framework.zend.com/manual/en/coding-standard.naming-conventions.html).


Outbound (MT) messaging sample


Set up the gateway:
The constructor should be passed gateway credentials, including a clientId and clientKey.  
If desired, a carrier list url and a message request url can be specified, otherwise the 
default 4Info gateway values will be used.

$gateway = new _4Info_Gateway();
$gateway->setClientId('25');
$gateway->setClientKey('283G1835JO1FM1F');
$gateway->setCarrierListUrl('http://test-gateway.4info.net/list');
$gateway->setMessageRequestUrl('http://test-gateway.4info.net/msg');

or

$gateway = new _4Info_Gateway('25','283G1835JO1FM1F');



Get carrier list:
To retrieve a list of supported carriers for the 4INFO Messaging Gateway, 
instantiate a Gateway object with your client credentials and request a carrier list.

$gateway = new _4Info_Gateway('25','283G1835JO1FM1F');
$carriers = $gateway->getCarriers();



Send a validation SMS message:

$gateway = new _4Info_Gateway('25','283G1835JO1FM1F');
$phoneNumber = '+16505551212';
$response = $gateway->sendValidationRequest($phoneNumber);



Send an SMS message:

$gateway = new _4Info_Gateway('25','283G1835JO1FM1F');
$sender = new _4Info_Gateway_Address('44636');
$recipient = new _4Info_Gateway_Address('+16505551212');
$message = 'Test message.';
$sms = new _4Info_Gateway_Sms($sender, $recipient, $message);
$response = $gateway->sendMessageRequest($sms);



Inbound (MO) messaging sample (see MOServer)

//Get the XML submitted to this servlet
$xml = _4INFO_Gateway::getPostedXML(false);
 
//Check that some xml was posted
if(!$xml) {
	header("HTTP/1.1 503 Service Unavailable");
	exit;
}

// Parse the incoming XML SMS message
$sms = _4INFO_Gateway::parseSms($xml);

// TODO: Dispatch the sms to your application for processing

// Respond indicating a successful receipt of the inbound message
header("HTTP/1.1 202 Accepted");



Inbound Blacklist sample (see BlacklistServer)

//Get the XML submitted to this servlet
$xml = _4INFO_Gateway::getPostedXML(false);
 
//Check that some xml was posted
if(!$xml) {
	header("HTTP/1.1 503 Service Unavailable");
	exit;
}

// Parse the incoming XML blacklist notification
$address = _4INFO_Gateway::parseBlock($xml);

// TODO: Dispatch the address to your application for processing

// Respond indicating a successful receipt of the inbound message
header("HTTP/1.1 202 Accepted");
